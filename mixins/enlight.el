                                                                                

;; Highly customizable startup screen for Emacs
(defface enlight-violet
  '((t (:foreground "#af00d7" :width expanded)))
  "Violet face for dashboard.")

(defvar enlight-emacs
  (propertize
   "███████╗███╗   ███╗ █████╗  ██████╗███████╗
██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
█████╗  ██╔████╔██║███████║██║     ███████╗
██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝"
   'face 'enlight-violet))

(defvar puffy
  (with-temp-buffer
    (insert-image (create-image "~/Pictures/puffy.svg"))
    (buffer-string))
  )

;; recent files
(use-package recentf
  :ensure t
  :config
  (recentf-mode)
  :custom
  (recentf-save-file
   (convert-standard-filename
       (expand-file-name  "emacs/recentf" (xdg-state-home))))
  (recentf-max-menu-items 25)
  (recentf-max-saved-items 25)
  (recentf-exclude '("/autosave$"
                     ".cache")))

(use-package grid
  :straight (:host github :repo "ichernyshovvv/grid.el"))

(use-package enlight
  :straight (:host github :repo "ichernyshovvv/enlight")

  
  :custom

  ;; (enlight-content
  ;;  (concat
  ;;   (grid-get-box `( :align center :content ,enlight-emacs  :width 80))
  ;;   "\n\n"
  ;;   (grid-get-box
  ;;    `(:align center
  ;;      :width 80
  ;;      :content
  ;;      ,(enlight-menu
  ;;        '(("Files"
  ;;               ("Recent" (consult-recent-file) "r"))
  ;;          ("Other"
  ;;           ("Projects" project-switch-project "p"))))))))


  (enlight-content
   (concat
    ;; (grid-get-box `( :align center :content ,puffy :width 80 :border nil))
    
 ;;    (grid-get-box `( :align center
 ;;                     :width 80
 ;;                     :content
 ;;                     ;; Art generated by
 ;;                     ;; https://www.patorjk.com/software/taag/#p=display&f=Isometric1&t=emacs
 ;;                     ,(propertize
 ;;                       "      ___           ___           ___           ___           ___
 ;;     /\\  \\         /\\__\\         /\\  \\         /\\  \\         /\\  \\
 ;;    /::\\  \\       /::|  |       /::\\  \\       /::\\  \\       /::\\  \\
 ;;   /:/\\:\\  \\     /:|:|  |      /:/\\:\\  \\     /:/\\:\\  \\     /:/\\ \\  \\
 ;;  /::\\~\\:\\  \\   /:/|:|__|__   /::\\~\\:\\  \\   /:/  \\:\\  \\   _\\:\\~\\ \\  \\
 ;; /:/\\:\\ \\:\\__\\ /:/ |::::\\__\\ /:/\\:\\ \\:\\__\\ /:/__/ \\:\\__\\ /\\ \\:\\ \\ \\__\\
 ;; \\:\\~\\:\\ \\/__/ \\/__/~~/:/  / \\/__\\:\\/:/  / \\:\\  \\  \\/__/ \\:\\ \\:\\ \\/__/
 ;;  \\:\\ \\:\\__\\         /:/  /       \\::/  /   \\:\\  \\        \\:\\ \\:\\__\\
 ;;   \\:\\ \\/__/        /:/  /        /:/  /     \\:\\  \\        \\:\\/:/  /
 ;;    \\:\\__\\         /:/  /        /:/  /       \\:\\__\\        \\::/  /
 ;;     \\/__/         \\/__/         \\/__/         \\/__/         \\/__/    "
 ;;                       'face 'modus-themes-fg-yellow-intense)))
    (grid-get-box
     `( :align center
        :width 80
        :content ,(enlight-menu
    '(("Org Mode"
       ("Org-Agenda (today)" (org-agenda nil "a") "a")
       ("Org directory" (dired org-directory) "o"))
      ("Projects"
       ("Switch to project" project-switch-project "p"))
      ("Files"
         ("Recent" (consult-recent-file) "r"))
      ("Desktop / Session"
       ("Restore session" desktop-read "r")
       ("Restore session from file" +desktop-read-session "R"))))))
   "\n"

    (grid-get-box
     `( :align center
        :width 80
        :content ,(with-temp-buffer
     (insert-file-contents "~/.emacs.d/theo")
     (let ((lines (split-string (buffer-string) "\n" t)))
       (nth (random (length lines)) lines))))))


   )
  :init
      (enlight-open)
    (setq initial-buffer-choice #'enlight))




;; (use-package enlight
;;   :ensure t
;;   :init
;;   (setopt initial-buffer-choice #'enlight)
;;   :custom
;;   (enlight-content
;;    (concat
;;     (grid-get-box `( :align center :content ,enlight-emacs  :width 80))
;;     "\n\n"
;;     (grid-get-box
;;      `(:align center
;;        :width 80
;;        :content
;;        ,(enlight-menu
;;          '(("Files"
;; 	        ("Recent" (consult-recent-file) "r"))
;;            ("Other"
;; 	    ("Projects" project-switch-project "p"))))))))

;;   )


(setq tab-bar-new-tab-choice "*enlight*") ;; buffer to show in new tabs
(setq tab-bar-tab-hints t) ;; show tab numbers
(setq tab-bar-select-tab-modifiers "super")

(setq tab-bar-format
      '(tab-bar-format-menu-bar tab-bar-format-tabs tab-bar-separator))

(global-set-key (kbd "s-{") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "s-}") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "s-t") 'tab-bar-new-tab)
(global-set-key (kbd "s-w") 'tab-bar-close-tab)
(global-set-key (kbd "s-1") 'tab-bar-select-tab)
(global-set-key (kbd "s-2") 'tab-bar-select-tab)
(global-set-key (kbd "s-3") 'tab-bar-select-tab)
(global-set-key (kbd "s-4") 'tab-bar-select-tab)
(global-set-key (kbd "s-5") 'tab-bar-select-tab)
(global-set-key (kbd "s-6") 'tab-bar-select-tab)
(global-set-key (kbd "s-7") 'tab-bar-select-tab)
(global-set-key (kbd "s-8") 'tab-bar-select-tab)
(global-set-key (kbd "s-9") 'tab-bar-select-tab)
(global-set-key (kbd "s-0") 'tab-bar-select-tab)

(add-hook
 'tab-bar-tab-post-open-functions
 (lambda (&rest _) (call-interactively #'tab-bar-rename-tab)))

;(global-unset-key (kbd "s-q"))
;(global-set-key (kbd "s-q") 'kill-current-buffer)
(setq tab-line-separator "") ;; set it to empty
